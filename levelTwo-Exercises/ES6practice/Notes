// 1. Basic Arrow Function Syntax
// The basic syntax of an arrow function is:

// javascript
// Copy code
// (parameter1, parameter2, ..., parameterN) => { statements }
// Use this when your function:

// Has multiple parameters.
// Contains multiple statements in the body.
// Example:

// javascript
// Copy code
// // Traditional Function
// function add(a, b) {
//   const sum = a + b;
//   return sum;
// }

// // Arrow Function
// const add = (a, b) => {
//   const sum = a + b;
//   return sum;
// };
// 2. Single Parameter (No Parentheses)
// If your function has only one parameter, you can omit the parentheses:

// javascript
// Copy code
// parameter => { statements }
// Use this when your function:

// Has exactly one parameter.
// Contains multiple statements in the body.
// Example:

// javascript
// Copy code
// // Traditional Function
// function square(x) {
//   return x * x;
// }

// // Arrow Function
// const square = x => {
//   return x * x;
// };
// 3. Implicit Return (Single-line Expression)
// For functions that immediately return an expression, you can use an implicit return:

// javascript
// Copy code
// (parameter1, parameter2, ..., parameterN) => expression
// Use this when your function:

// Is a single expression (i.e., can be written in one line).
// Doesn't have other statements like variable declarations or loops.
// Example:

// javascript
// Copy code
// // Traditional Function
// function add(a, b) {
//   return a + b;
// }

// // Arrow Function
// const add = (a, b) => a + b;
// 4. No Parameters
// If there are no parameters, you must use empty parentheses:

// javascript
// Copy code
// () => { statements }
// Use this when your function:

// Has no parameters.
// Contains multiple statements or a single statement.
// Example:

// javascript
// Copy code
// // Traditional Function
// function sayHello() {
//   console.log('Hello');
// }

// // Arrow Function
// const sayHello = () => {
//   console.log('Hello');
// };
// 5. Returning Object Literals
// To return an object literal directly, wrap the object in parentheses:

// javascript
// Copy code
// (parameters) => ({ objectProperties })
// Use this when your function:

// Returns an object literal directly.
// Example:

// javascript
// Copy code
// // Traditional Function
// function getObject(id) {
//   return { id: id, name: 'Object' };
// }

// // Arrow Function
// const getObject = id => ({ id: id, name: 'Object' });
// Understanding the Context (this)
// One important thing to note about arrow functions is that they do not have their own this context. They inherit this from the parent scope at the time they are defined. This is different from traditional functions, which have their own this context. Be mindful of this when converting functions that rely on this.

// Conclusion
// Choose the syntax based on the function's complexity and structure. The more you work with these patterns, the more intuitive it will become to decide which arrow function syntax to use in different situations.

// Converting to Arrow Functions
// When converting a traditional function to an arrow function, the key changes to make are:

// Replace the function Keyword with =>: Remove the function keyword and place the arrow (=>) after the parameters.

// Remove the return Keyword for Single-Line Expressions: If the function body is a single expression that's being returned, you can use an implicit return. This means you can remove the curly braces {} and the return keyword.

// Parameters: If the function has a single parameter, you can omit the parentheses around the parameter. If there are no parameters or multiple parameters, use parentheses.
